============ global var ================
double_array_b := symbol type: 1; data type: 4; initValue: double_array_b: 7.8

n := symbol type: 2; data type: 2; initValue: n: 6

double_array_a := symbol type: 1; data type: 4; initValue: double_array_a: 1.2

============ imm value ================
ImmValue_2: {0, 0, 0, 0, 0, 0}
============ functions ================
----------- funcDef -----------
double_array_vector_add() => 0:
----------- paramVars -----------
----------- localVars -----------
double_array_c := symbol type: 1; data type: 4; initValue: ImmValue_2: {0, 0, 0, 0, 0, 0}

----------- tempVars ------------
t_2:= symbol type: TEMP VAR; data type: 4
t_1:= symbol type: TEMP VAR; data type: 4
t_0:= symbol type: TEMP VAR; data type: 4
----------- Codes ------------
double_array_vector_add:
	double_array_c = ImmValue_2: {0, 0, 0, 0, 0, 0};
	t_0 = 0;
	while (t_0 < 6) {
		t_1 = double_array_a[t_0];
		t_2 = double_array_b[t_0];
		t_3 = t_1 + t_2;
		double_array_c[t_0] = t_3;
	}
	t_0 = double_array_a + double_array_b;
	t_1 = t_0[0];
	double_array_c[0] = t_1;
	t_1 = t_0[1];
	double_array_c[1] = t_1;
	t_1 = t_0[2];
	double_array_c[2] = t_1;
	t_1 = t_0[3];
	double_array_c[3] = t_1;
	t_1 = t_0[4];
	double_array_c[4] = t_1;
	t_1 = t_0[5];
	double_array_c[5] = t_1;
	t_2 = double_array_c[5];
	addparam t_2;
	call print_double, frame size: 80; 
	return ;

----------- funcDef -----------
main() => 2:
----------- paramVars -----------
----------- localVars -----------
----------- tempVars ------------
----------- Codes ------------
main:
	call double_array_vector_add, frame size: 8; 
	return 0;

