============ global var ================
============ imm value ================
============ functions ================
----------- funcDef -----------
add(2) => 2:
----------- paramVars -----------
n := symbol type: 0; data type: 2
----------- localVars -----------
----------- tempVars ------------
t_2:= symbol type: TEMP VAR; data type: 2
t_1:= symbol type: TEMP VAR; data type: 2
t_0:= symbol type: TEMP VAR; data type: 1
----------- Codes ------------
add:
	n =  param 0;
	t_0 = n == 2
	beqz t_0 L_0_add
	t_1 = n * 2;
	return t_1;
	goto L_1_add
L_0_add:
	t_2 = n + 10;
	return t_2;
L_1_add:
	return ;

----------- funcDef -----------
main() => 2:
----------- paramVars -----------
----------- localVars -----------
result := symbol type: 1; data type: 2; initValue: 0

n := symbol type: 1; data type: 2; initValue: 0

----------- tempVars ------------
t_12:= symbol type: TEMP VAR; data type: 2
t_3:= symbol type: TEMP VAR; data type: 2
t_8:= symbol type: TEMP VAR; data type: 2
t_2:= symbol type: TEMP VAR; data type: 1
t_10:= symbol type: TEMP VAR; data type: 2
t_6:= symbol type: TEMP VAR; data type: 2
t_7:= symbol type: TEMP VAR; data type: 2
t_0:= symbol type: TEMP VAR; data type: 2
t_5:= symbol type: TEMP VAR; data type: 2
t_9:= symbol type: TEMP VAR; data type: 2
----------- Codes ------------
main:
	n = 0;
	result = 0;
	call get_int; 
	t_0 =  return ;
	t_1 <= n;
	t_1 = t_0;
	t_2 = t_1 > 1
	beqz t_2 L_0_main
	addparam t_1;
	call add; 
	t_3 =  return ;
	t_4 <= result;
	t_4 = t_3;
	goto L_1_main
L_0_main:
	t_5 = 2 * 8;
	t_6 = 1 + t_5;
	t_7 = t_6 + 100;
	t_8 = t_7 - 9999;
	t_9 = 10000 / 5;
	t_10 = t_8 + t_9;
	t_11 <= result;
	t_11 = t_10;
	t_12 = t_11 + 1000;
	t_13 <= n;
	t_13 = t_12;
L_1_main:
	n <= t_14;
	t_14 = phi t_13,n
	result <= t_15;
	t_15 = phi t_4,result,t_11
	addparam t_15;
	call print_int; 
	return 0;

